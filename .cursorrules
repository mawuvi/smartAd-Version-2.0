# SMARTAD DEVELOPMENT STANDARDS

## üèóÔ∏è ARCHITECTURE PATTERNS

### MVC Structure Strict Enforcement
- Controllers: Thin, only handle HTTP logic, validation, and response formatting
- Models: Business logic, database operations, data validation
- Views: Presentation only, minimal PHP logic
- Services: Complex business operations that span multiple models

### Department-First Architecture
- All new features must consider multi-department scalability
- Use department context in all database queries
- Implement role-based access control from foundation

## üîí SECURITY PROTOCOLS

### Database Security
- ALWAYS use prepared statements with parameter binding
- NEVER concatenate variables directly into SQL queries
- Validate all user input before database operations
- Use PHP Data Objects (PDO) for all database interactions

### Input Validation Standards
```php
// REQUIRED PATTERN:
$user_id = filter_var($_POST['user_id'], FILTER_VALIDATE_INT);
if ($user_id === false || $user_id <= 0) {
    throw new InvalidArgumentException('Invalid user ID');
}

## üíæ DATABASE STANDARDS

### Query Optimization
- Always index foreign keys and frequently searched columns
- Use EXPLAIN on complex queries during development
- Implement pagination for large datasets
- Cache frequently accessed, rarely changed data

### Data Consistency
- Use transactions for multi-table operations
- Implement soft deletes where appropriate
- Maintain audit trails for critical operations

## üéØ PHP DEVELOPMENT STANDARDS

### Error Handling
```php
// Use exceptions for business logic errors
try {
    $calculator = new RateCalculator();
    $result = $calculator->calculate($input);
} catch (ValidationException $e) {
    // Handle user input errors
    return json_encode(['error' => $e->getMessage()]);
} catch (CalculationException $e) {
    // Handle business logic errors
    error_log("Calculation failed: " . $e->getMessage());
    return json_encode(['error' => 'Calculation service unavailable']);
}

## üîÑ DATA FETCHING STRATEGY

### Hybrid Loading Pattern (REQUIRED)
```php
// Dashboard loads static data
public function dashboard() {
    $data['static_options'] = $this->options_model->getStaticOptions();
    $this->load->view('dashboard', $data);
}

// Modal fetches dynamic data via AJAX
public function get_modal_data() {
    $dynamic_data = $this->rates_model->getCurrentRates();
    header('Content-Type: application/json');
    echo json_encode($dynamic_data);
}

### Routing Structure
- Base routes: /{department}/feature
- Department detection from URL or user session
- Fallback to default department when unspecified

## üß™ TESTING & QUALITY

### Development Testing
- Test all calculator edge cases
- Verify department isolation works correctly
- Test with large datasets for performance
- Validate all user input scenarios

### Code Quality Checks
- No commented-out code in commits
- Meaningful commit messages
- Update documentation when changing features
- Peer review for critical functionality

## üöÄ PERFORMANCE RULES

### Critical Performance Requirements
- Dashboard load time under 2 seconds
- Modal AJAX responses under 500ms
- Database queries optimized with indexes
- Implement caching for rate calculations

### Monitoring Requirements
- Log slow database queries (>100ms)
- Monitor AJAX response times
- Track department-specific usage patterns
